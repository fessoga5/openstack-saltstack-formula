{% set virt_type="kvm" if grains['virtual'] == "physical" else "qemu" %} 		
{%- set nova=salt["grains.filter_by"]({ 		
  "Debian": { 		
    "name": "nova", 		
    "controller_pkgs": ["nova-api", 		
                        "nova-conductor", 		
                        "nova-consoleauth", 		
                        "nova-novncproxy", 		
                        "nova-scheduler", 		
                        "python-novaclient"], 		
    "controller_services": ["nova-api", 		
                            "nova-conductor", 		
                            "nova-consoleauth", 		
                            "nova-scheduler"], 		
    "all_in_one_pkgs": ["nova-api", 		
                        "nova-compute", 		
                        "nova-compute-" + salt["pillar.get"]("nova:config:libvirt:virt_type", virt_type), 		
                        "nova-conductor", 		
                        "nova-consoleauth", 		
                        "nova-novncproxy", 		
                        "nova-network", 		
                        "nova-scheduler"], 		
    "all_in_one_services": ["nova-api", 		
                            "nova-compute", 		
                            "nova-conductor", 		
                            "nova-consoleauth", 		
                            "nova-scheduler", 		
                            "nova-network"], 		
    "compute_pkgs": [	
                     "nova-api-metadata", 		
                     "nova-compute", 		
                     "nova-compute-" + salt["pillar.get"]("nova:config:libvirt:virt_type", virt_type), 		
                     ], 		
    "compute_services": ["nova-network", "nova-compute"], 		
    "conntrack": "conntrack"	
  }, 		
}, merge=salt["pillar.get"]("nova:lookup")) %} 		
		
# Set the nova default config 		
{%- set nova_config = { 		
  "DEFAULT": {
    "verbose": "True",
    "my_ip": salt["pillar.get"]("nova:internal_ip"), 		
    "dhcpbridge_flagfile": "/etc/nova/nova.conf", 		
    "dhcpbridge": "/usr/bin/nova-dhcpbridge", 		
    "logdir": "/var/log/nova", 		
    "state_path": "/var/lib/nova", 		
    "lock_path": "/var/lock/nova", 		
    "force_dhcp_release": "True", 		
    "iscsi_helper": "tgtadm", 		
    "root_helper": "sudo nova-rootwrap /etc/nova/rootwrap.conf", 		
    "ec2_private_dns_show_ip": "True", 		
    "api_paste_config": "/etc/nova/api-paste.ini", 		
    "enabled_apis": "ec2,osapi_compute,metadata", 		
    "compute_driver": salt["pillar.get"]("nova:driver"), 		
    "libvirt_use_virtio_for_bridges": "True",
    "volumes_path": "/var/lib/nova/volumes",
    "connection_type": "libvirt",
    "auth_strategy": "keystone", 		
    "rpc_backend": "rabbit", 		
    "novncproxy_host": "0.0.0.0", 		
    "vncserver_listen": "0.0.0.0", 		
    "novncproxy_base_url": "http://" + salt["pillar.get"]("nova:novncproxy_base_ip") + ":6080/vnc_auto.html", 		
    "vncserver_proxyclient_address": salt["pillar.get"]("nova:internal_ip"), 		
    "network_api_class": "nova.network.neutronv2.api.API",
    "linuxnet_interface_driver": "nova.network.linux_net.LinuxOVSInterfaceDriver",
    "firewall_driver": "nova.virt.firewall.NoopFirewallDriver",
    "hw_disk_discard": "unmap",
    "network_device_mtu": "2000"
  }, 		
  "glance": { 		
    "host": salt["pillar.get"]("nova:glance:host") 		
  }, 		
  "database": { 		
    "connection": ("mysql://nova:" + salt["pillar.get"]("nova:mysql:password") + "@" 		
                   + salt["pillar.get"]("nova:mysql:host", "localhost") 		
                   + "/nova?charset=utf8") 		
  }, 		
  "neutron":{ 		
    "url": ("http://" + salt["pillar.get"]("nova:neutron:host") + ":9696"), 		
    "auth_strategy": "keystone",
    "admin_auth_url": ("http://" + salt["pillar.get"]("nova:keystone:host") + ":35357/v2.0"),
    "admin_tenant_name": "service",
    "admin_username": "neutron",
    "admin_password": salt["pillar.get"]("nova:neutron:password"),
    "service_metadata_proxy": "True",
    "metadata_proxy_shared_secret": salt["pillar.get"]("nova:neutron:meta_password")
  } 		
  "keystone_authtoken":{ 		
    "keystone_uri": ("http://" + salt["pillar.get"]("nova:keystone:host") + ":5000"), 		
    "keystone_url": ("http://" + salt["pillar.get"]("nova:keystone:host") + ":35357"), 		
    "auth_plugin": "password",
    "project_domain_id": "default",
    "user_domain_id": "default",
    "project_name": "service",
    "username": "nova",
    "password": salt["pillar.get"]("nova:keystone:password")   
  }
  "oslo_concurrency":{
    "lock_path": "/var/lib/nova/tmp"
  }
  "oslo_messaging_rabbit":{
    "rabbit_hosts": (salt["pillar.get"]("nova:rabbitmq:host") + ":5672"),
    "rabbit_userid": salt["pillar.get"]("nova:rabbitmq:name"), 		
    "rabbit_password": salt["pillar.get"]("nova:rabbitmq:password"), 		
    "rabbit_retry_interval": "1",
    "rabbit_retry_backoff": "2",
    "rabbit_max_retries": "0",
    "rabbit_durable_queues": "true",
    "rabbit_ha_queues": "true"	
} %} 		
		
{% for section, value in salt["pillar.get"]("nova:config").iteritems() %} 		
  {% if not nova_config.has_key(section) %} 		
    {% do nova_config.update({ section:{} }) %} 		
  {% endif %} 		
  {% do nova_config[section].update(value) %} 		
{% endfor %} 		
		
{#- vim:ft=sls 		
-#}
